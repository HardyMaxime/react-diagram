{"version":3,"sources":["components/Chart/Chart.js","components/Form/Form.js","components/UI/Select/Select.js","App.js","serviceWorker.js","index.js"],"names":["chart","props","type","react_default","a","createElement","es","id","data","options","form","action","className","name","placeholder","onChange","onChangeChartTitle","onInputChangeHandler","onNumberChangeHandler","lib","color","background","onChangeComplete","complete","style","display","onClick","click","select","marginTop","value","change","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAnimationCompleted","link","document","querySelector","canvas","addEventListener","setAttribute","toDataURL","replace","e","content","target","setState","inputContent","number","parseInt","inputNumber","handleChangeComplete","inputBackgroundColor","hex","handleSelectChange","selectValue","title","text","onClickHandler","preventDefault","prevState","objectSpread","labels","toConsumableArray","concat","state","datasets","backgroundColor","selectValueToRemove","label","scales","yAxes","stacked","ticks","beginAtZero","animation","onComplete","Chart","Select","defaultValue","Form_Form","onChangeCheckBox","onChangeCheckBoxHandler","checkBoxValue","checkBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a68418f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Pie,\r\n    Bar,\r\n    Line,\r\n    Radar,\r\n    Doughnut,\r\n    Polar\r\n} from 'react-chartjs-2'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n const chart = props => {\r\n    switch (props.type) {\r\n            case 'pie':\r\n                return <Pie id=\"pie\" data={props.data}\r\n                    options={props.options} />\r\n            case 'bar':\r\n                return <Bar data={props.data}\r\n                    options={props.options} />\r\n            case 'line':\r\n                return <Line data={props.data}\r\n                    options={props.options} />\r\n            case 'radar':\r\n                return <Radar data={props.data}\r\n                    options={props.options} />\r\n            case 'doughnut':\r\n                return <Doughnut data={props.data}\r\n                    options={props.options} />\r\n            case 'polar':\r\n                return <Polar data={props.data}\r\n                    options={props.options} />\r\n            default:\r\n                return <Pie data={props.data}\r\n                        options={props.options} />\r\n        }\r\n}\r\n\r\nexport default chart;\r\n\r\nchart.propTypes = {\r\n    data: PropTypes.object.isRequired,\r\n    options: PropTypes.object.isRequired\r\n}\r\n\r\n","import React from 'react'\r\nimport {\r\n    TwitterPicker\r\n} from 'react-color';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Form.css'\r\n\r\nconst form = props => {\r\n    return (\r\n       <form action=\"#\" >\r\n              <input className=\"form-control\" type=\"text\" name=\"\" placeholder=\"Custom Chart Title\" onChange={props.onChangeChartTitle} />\r\n              <input className=\"form-control\" type=\"text\" name=\"\" placeholder=\"Add data\" onChange={props.onInputChangeHandler} />\r\n              <input className=\"form-control\" type=\"number\" onChange={props.onNumberChangeHandler} placeholder=\"Choose a number\" name=\"\" />\r\n              <div className=\"form-picker\">\r\n                <TwitterPicker color={ props.background }\r\n                  onChangeComplete={ props.complete } \r\n                /> \r\n              </div>\r\n              <button style={{display: 'inline-block'}} className=\"btn btn-primary\" onClick={props.click} >Add data</button>\r\n               <a className=\"btn btn-primary\" id=\"btn-dw\" >Generate diagram (jpg)</a>\r\n        </form>\r\n    )\r\n}\r\n\r\nform.propTypes = {\r\n    onChangeChartTitle: PropTypes.func.isRequired,\r\n    onInputChangeHandler: PropTypes.func.isRequired,\r\n    onNumberChangeHandler: PropTypes.func.isRequired,\r\n    click: PropTypes.func.isRequired,\r\n    background: PropTypes.string.isRequired,\r\n    complete: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default form\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Select';\r\n \r\nconst select = props => (\r\n        <select style={{marginTop:0}}  value={props.value} onChange={props.change} className=\"form-control\">\r\n                {props.children}\r\n        </select>\r\n    )\r\n \r\nselect.propTypes = {\r\n    value : PropTypes.string.isRequired,\r\n    change : PropTypes.func.isRequired,\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default select;","import React, { Component } from 'react';\nimport Chart from './components/Chart/Chart'\nimport Form from './components/Form/Form'\nimport Select from './components/UI/Select/Select'\n\nimport './App.css'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputContent: '',\n            inputNumber: 0,\n            inputBackgroundColor: '#fff',\n            selectValue: '',\n            selectValueToRemove: '',\n            data: {\n              labels: [],\n              datasets: [{\n                label: '# of Votes',\n                data: [],\n                backgroundColor: []\n              }]\n            },\n            options: {\n              title: {\n                display: true,\n                text: 'Custom Chart Title'\n              },\n              scales: {\n                yAxes: [{\n                  stacked: true,\n                  ticks: {\n                    beginAtZero: true,\n                  }\n                }]\n              },\n              animation : {\n                onComplete: this.onAnimationCompleted\n              }\n\n            }\n          }\n    }\n\n    onAnimationCompleted = () => {\n      const link = document.querySelector('#btn-dw')\n      const canvas = document.querySelector('.chartjs-render-monitor')\n      link.addEventListener('click', () => {\n        link.setAttribute('download', 'diagram.jpg');\n        link.setAttribute('href', canvas.toDataURL(\"image/jpg\").replace(\"image/jpg\", \"image/octet-stream\"));\n      })\n    }\n\n\n  onInputChangeHandler = (e) => {\n    const content = e.target.value\n      this.setState({\n        inputContent : content\n      })\n  }\n  onNumberChangeHandler = (e) => {\n    const number = parseInt(e.target.value)\n      this.setState({\n        inputNumber: number\n      })\n  }\n\n  handleChangeComplete = (color) => {\n    this.setState({\n      inputBackgroundColor: color.hex\n    });\n  }\n\n  handleSelectChange = (e) => {\n    this.setState({selectValue : e.target.value})\n  }\n\n  onChangeChartTitle = (e) => {\n    this.setState({\n      options : {\n        title : {\n          text: e.target.value\n        }\n      }\n    })\n  }\n\n\n  onClickHandler = (e) => {\n    e.preventDefault()\n    this.setState(prevState => ({\n      data: {\n         ...prevState.data,\n        labels: [...prevState.data.labels, this.state.inputContent],\n        datasets : \n        [\n          {\n            ...prevState.data.datasets[0], \n            data: [...prevState.data.datasets[0].data, this.state.inputNumber],\n            backgroundColor: [...prevState.data.datasets[0].backgroundColor, this.state.inputBackgroundColor]\n          }\n        ]\n      }\n    }))\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-align-center\" >Diagram Editor</h1>\n        <div className=\"row\">\n          <div className=\"row-diagram\">\n            <Chart type={this.state.selectValue} data={this.state.data} options={this.state.options} />\n          </div>\n          <div className=\"row-form\">   \n            <Select value={this.state.selectValue} change={this.handleSelectChange}>\n                <option defaultValue>Select your diagram</option>\n                <option value=\"pie\">Pie</option>\n                <option value=\"bar\">Bar</option>\n                <option value=\"line\">Line</option>\n                <option value=\"radar\">Radar</option>\n                <option value=\"doughnut\">Doughnut</option>\n                <option value=\"polar\">Polar</option>\n            </Select>\n            <Form onInputChangeHandler={this.onInputChangeHandler} onNumberChangeHandler={this.onNumberChangeHandler} \n              background={this.state.inputBackgroundColor} complete={this.handleChangeComplete}\n              click={this.onClickHandler} onChangeChartTitle={this.onChangeChartTitle}\n              onChangeCheckBox={this.onChangeCheckBoxHandler} checkBoxValue={this.state.checkBox} / >\n\n             \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}